{
  "stats": {
    "suites": 1,
    "tests": 2,
    "passes": 2,
    "pending": 0,
    "failures": 0,
    "start": "2024-12-15T03:50:52.094Z",
    "end": "2024-12-15T03:54:01.369Z",
    "duration": 189275,
    "testsRegistered": 2,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c9c56a01-62de-44bb-9a27-c3cf102ebf6d",
      "title": "",
      "fullFile": "cypress/e2e/test-suites/ECP-T3415-AssignNonExistingUser.spec.ts",
      "file": "cypress/test-suites/ECP-T3415-AssignNonExistingUser.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e240f7d0-f528-44be-956c-d1c8a9cf9df3",
          "title": "ECP-T3415-CHRS: Ingestion of HL7 Assignee information functionality for non existing user ",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "ECP-T3557",
              "fullTitle": "ECP-T3415-CHRS: Ingestion of HL7 Assignee information functionality for non existing user  ECP-T3557",
              "timedOut": null,
              "duration": 174419,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_1.Common.login(customerName, userName, userpassword);\ncommon_1.Common.switchToCustomer(customerName, configFile.timeout, true);\ncommon_1.Common.switchToFacility(facilityName);\ncy.reload();\ncommon_1.Common.navigateTo('Sharing List');\ncy.waitUntil(function () { return cy.get('.pageTitle').should('be.visible'); }, { timeout: configFile.hugeTimeout });\nmeteor_1.Meteor.changeFeatures({\n    allowAPIs: true,\n    allowHl7: true,\n    allowWorkstationViewer: true,\n    allowWorklist: true,\n    allowHl7Assignment: true\n}, facilityName);\nvar mrn = crypto.randomUUID();\nvar accession = crypto.randomUUID();\ncommon_1.Common.createAPIToken(\"api_token_for_org_\".concat(facilityName)).then(function (res) {\n    token = res.token;\n    orgId = res.orgId;\n    common_1.Common.uploadProc({ name: 'Natasha Romanoff', token: token, mrn: mrn, accession: accession });\n    common_1.Common.uploadStudy('a-02', token);\n}).then(function () {\n    common_1.Common.logout();\n    common_1.Common.login(customerName, limitedUser, limitedPassword);\n    cy.wrap(meteor_1.Meteor.acceptTermWS(limitedUser, limitedPassword));\n    cy.reload();\n    common_1.Common.navigateTo('Worklist');\n    worklist_common_1.Worklist.selectView('All Unread');\n    cy.wait(1000);\n    // Step 2\n    var firstName = crypto.randomUUID();\n    var lastName = crypto.randomUUID();\n    cy.request({\n        method: 'POST', url: \"\".concat(configFile.url, \"/api/organizations/\").concat(orgId, \"/externalassignment/add\"), auth: {\n            bearer: token\n        }, headers: {\n            'Accept': 'application/json; charset=utf-8',\n            'Accept-Encoding': 'gzip, deflate, br',\n            'Content-Type': 'application/json; charset=utf-8'\n        }, body: {\n            accessionNumber: accession,\n            firstName: firstName,\n            lastName: lastName,\n            assigneeId: crypto.randomUUID()\n        }, timeout: configFile.longTimeout\n    });\n    worklist_common_1.Worklist.refreshWL();\n    worklist_common_1.Worklist.getRowsByMRN(mrn).should('contain.text', firstName).and('contain.text', lastName);\n    worklist_common_1.Worklist.getRowsByMRN(mrn).children().eq(2).rightclick({ force: true });\n    element_handler_1.elementHandler.element('assignTo').click();\n    element_handler_1.elementHandler.element('assignToConfirmation').find('input').click({ force: true });\n    element_handler_1.elementHandler.element('assignToConfirmation').find('div.Select-menu-outer').should('contain.text', firstName).and('contain.text', lastName);\n    element_handler_1.elementHandler.element('assignToConfirmation').parent().find('button[title=\"Close\"]').click();\n    worklist_common_1.Worklist.getRowsByMRN(mrn).children().eq(2).rightclick({ force: true });\n    element_handler_1.elementHandler.element('hipaaLog').click();\n    cy.get('.hipaa-logs-modal').find('[role=\"rowgroup\"]').first().find('button').click();\n    cy.get('.hipaa-event-details-basic-table').should('contain.text', firstName).and('contain.text', lastName);\n    cy.get('.hipaa-logs-modal').find('button.close').click();\n    // Step 3\n    var otherFirstName = crypto.randomUUID();\n    var otherLastName = crypto.randomUUID();\n    cy.request({\n        method: 'POST', url: \"\".concat(configFile.url, \"/api/organizations/\").concat(orgId, \"/externalassignment/add\"), auth: {\n            bearer: token\n        }, headers: {\n            'Accept': 'application/json; charset=utf-8',\n            'Accept-Encoding': 'gzip, deflate, br',\n            'Content-Type': 'application/json; charset=utf-8'\n        }, body: {\n            accessionNumber: accession, firstName: otherFirstName, lastName: otherLastName, assigneeId: crypto.randomUUID()\n        }, timeout: configFile.longTimeout\n    });\n    worklist_common_1.Worklist.refreshWL();\n    worklist_common_1.Worklist.getRowsByMRN(mrn).should('contain.text', otherFirstName).and('contain.text', otherLastName);\n    worklist_common_1.Worklist.getRowsByMRN(mrn).children().eq(2).rightclick({ force: true });\n    element_handler_1.elementHandler.element('assignTo').click();\n    element_handler_1.elementHandler.element('assignToConfirmation').find('input').click({ force: true });\n    element_handler_1.elementHandler.element('assignToConfirmation').find('div.Select-menu-outer').should('contain.text', otherFirstName).and('contain.text', otherLastName);\n    element_handler_1.elementHandler.element('assignToConfirmation').parent().find('button[title=\"Close\"]').click();\n    worklist_common_1.Worklist.getRowsByMRN(mrn).children().eq(2).rightclick({ force: true });\n    element_handler_1.elementHandler.element('hipaaLog').click();\n    cy.get('.hipaa-logs-modal').find('[role=\"rowgroup\"]').first().find('button').click();\n    cy.get('.hipaa-event-details-basic-table').should('contain.text', otherFirstName).and('contain.text', otherLastName);\n    cy.get('.hipaa-logs-modal').find('button.close').click();\n    //Step 4\n    var nonExistingAccession = crypto.randomUUID();\n    cy.request({\n        method: 'POST', url: \"\".concat(configFile.url, \"/api/organizations/\").concat(orgId, \"/externalassignment/add\"), auth: {\n            bearer: token\n        }, headers: {\n            'Accept': 'application/json; charset=utf-8',\n            'Accept-Encoding': 'gzip, deflate, br',\n            'Content-Type': 'application/json; charset=utf-8'\n        }, body: {\n            accessionNumber: nonExistingAccession,\n            firstName: firstName,\n            lastName: lastName,\n            assigneeId: crypto.randomUUID()\n        }, timeout: configFile.longTimeout\n    }).its('status').should('eq', 200);\n    //Step 5\n    cy.window().then(function (win) {\n        var meterToken = \"meteor:\".concat(win.localStorage.getItem('Meteor.loginToken'));\n        cy.request({\n            method: 'GET', url: \"\".concat(configFile.url, \"/api/assignments/pendings/\").concat(orgId), auth: {\n                bearer: meterToken\n            }, headers: {\n                'Accept': 'application/json; charset=utf-8',\n                'Accept-Encoding': 'gzip, deflate, br',\n                'Content-Type': 'application/json; charset=utf-8'\n            }\n        }).then(function (res) {\n            expect(res.body.some(function (assignment) { return assignment.accessionNumber === nonExistingAccession; })).to.eq(true);\n        });\n    });\n    //Step 6\n    worklist_common_1.Worklist.getRowsByMRN('a-02').first().children().eq(2).rightclick({ force: true });\n    element_handler_1.elementHandler.element('workflowAdministration').click();\n    element_handler_1.elementHandler.element('editExam').click();\n    cy.get('.patient-procedure-study-modal').contains('button', 'Edit').click();\n    cy.get('.patient-procedure-study-modal').find('input[name=\"accessionNumber\"]').clear({ force: true }).type(nonExistingAccession, { force: true });\n    cy.get('.patient-procedure-study-modal').contains('button', 'Save').click();\n    cy.get('.patient-procedure-study-modal').contains('button', 'Confirm').click();\n    worklist_common_1.Worklist.waitForWLData();\n    worklist_common_1.Worklist.refreshWL();\n    element_handler_1.elementHandler.waitforElementToNotExist('[class=\"icon__locked\"]', { isDataCy: false });\n    worklist_common_1.Worklist.getRowsByMRN('a-02').should('contain.text', firstName).and('contain.text', lastName);\n    worklist_common_1.Worklist.getRowsByMRN('a-02').children().eq(2).rightclick({ force: true });\n    element_handler_1.elementHandler.element('assignTo').click();\n    element_handler_1.elementHandler.element('assignToConfirmation').find('input').click({ force: true });\n    element_handler_1.elementHandler.element('assignToConfirmation').find('div.Select-menu-outer').should('contain.text', firstName).and('contain.text', lastName);\n    element_handler_1.elementHandler.element('assignToConfirmation').parent().find('button[title=\"Close\"]').click();\n    worklist_common_1.Worklist.getRowsByMRN('a-02').children().eq(2).rightclick({ force: true });\n    element_handler_1.elementHandler.element('hipaaLog').click();\n    cy.get('.hipaa-logs-modal').find('[role=\"rowgroup\"]').first().find('button').click();\n    cy.get('.hipaa-event-details-basic-table').should('contain.text', firstName).and('contain.text', lastName);\n    cy.get('.hipaa-logs-modal').find('button.close').click();\n    cy.wait(configFile.smallTimeout);\n    //Step 7\n    cy.window().then(function (win) {\n        var meterToken = \"meteor:\".concat(win.localStorage.getItem('Meteor.loginToken'));\n        cy.request({\n            method: 'GET', url: \"\".concat(configFile.url, \"/api/assignments/pendings/\").concat(orgId), auth: {\n                bearer: meterToken\n            }, headers: {\n                'Accept': 'application/json; charset=utf-8',\n                'Accept-Encoding': 'gzip, deflate, br',\n                'Content-Type': 'application/json; charset=utf-8'\n            }\n        }).then(function (res) {\n            expect(res.body).to.be.empty;\n        });\n    });\n    //Step 8\n    cy.request({\n        method: 'POST', url: \"\".concat(configFile.url, \"/api/organizations/\").concat(orgId, \"/externalassignment/add\"), auth: {\n            bearer: token\n        }, headers: {\n            'Accept': 'application/json; charset=utf-8',\n            'Accept-Encoding': 'gzip, deflate, br',\n            'Content-Type': 'application/json; charset=utf-8'\n        }, body: {\n            accessionNumber: accession\n        }, timeout: configFile.longTimeout\n    });\n    //Step 9\n    var newAccessionNumber = crypto.randomUUID();\n    common_1.Common.uploadProc({ name: crypto.randomUUID(), accession: newAccessionNumber, token: token });\n    worklist_common_1.Worklist.refreshWL();\n    worklist_common_1.Worklist.getRowsByMRN('a-02').first().children().eq(2).rightclick({ force: true });\n    element_handler_1.elementHandler.element('workflowAdministration').click();\n    element_handler_1.elementHandler.element('editExam').click();\n    cy.get('.patient-procedure-study-modal').contains('button', 'Edit').click();\n    cy.get('.patient-procedure-study-modal').find('input[name=\"accessionNumber\"]').clear({ force: true }).type(newAccessionNumber, { force: true });\n    cy.get('.patient-procedure-study-modal').contains('button', 'Save').click();\n    cy.get('.patient-procedure-study-modal').contains('button', 'Confirm').click();\n    worklist_common_1.Worklist.waitForWLData();\n    worklist_common_1.Worklist.refreshWL();\n    element_handler_1.elementHandler.waitforElementToNotExist('[class=\"icon__locked\"]', { isDataCy: false });\n    worklist_common_1.Worklist.getRowsByMRN(mrn).first().children().eq(2).rightclick({ force: true });\n    element_handler_1.elementHandler.element('workflowAdministration').click();\n    element_handler_1.elementHandler.element('editExam').click();\n    cy.get('.patient-procedure-study-modal').find('#patient-procedure-study-tabs-tab-Procedure').click();\n    cy.get('.patient-procedure-study-modal').contains('button', 'Edit').click();\n    cy.get('.patient-procedure-study-modal').find('input[name=\"accessionNumber\"]').clear({ force: true }).type(newAccessionNumber, { force: true });\n    cy.get('.patient-procedure-study-modal').contains('button', 'Save').click();\n    cy.get('.patient-procedure-study-modal').contains('button', 'Confirm').click();\n    worklist_common_1.Worklist.waitForWLData();\n    worklist_common_1.Worklist.refreshWL();\n    element_handler_1.elementHandler.waitforElementToNotExist('[class=\"icon__locked\"]', { isDataCy: false });\n    //Step 10\n    cy.request({\n        method: 'POST', url: \"\".concat(configFile.url, \"/api/organizations/\").concat(orgId, \"/externalassignment/add\"), auth: {\n            bearer: token\n        }, headers: {\n            'Accept': 'application/json; charset=utf-8',\n            'Accept-Encoding': 'gzip, deflate, br',\n            'Content-Type': 'application/json; charset=utf-8'\n        }, body: {\n            accessionNumber: newAccessionNumber,\n            firstName: firstName,\n            lastName: lastName,\n            assigneeId: crypto.randomUUID()\n        }, timeout: configFile.longTimeout\n    });\n    worklist_common_1.Worklist.getRowsByMRN('a-02').should('contain.text', firstName).and('contain.text', lastName);\n    worklist_common_1.Worklist.getRowsByMRN('a-02').children().eq(2).rightclick({ force: true });\n    element_handler_1.elementHandler.element('assignTo').click();\n    element_handler_1.elementHandler.element('assignToConfirmation').find('input').click({ force: true });\n    element_handler_1.elementHandler.element('assignToConfirmation').find('div.Select-menu-outer').should('contain.text', firstName).and('contain.text', lastName);\n    element_handler_1.elementHandler.element('assignToConfirmation').parent().find('button[title=\"Close\"]').click();\n    worklist_common_1.Worklist.getRowsByMRN('a-02').children().eq(2).rightclick({ force: true });\n    element_handler_1.elementHandler.element('hipaaLog').click();\n    cy.get('.hipaa-logs-modal').find('[role=\"rowgroup\"]').first().find('button').click();\n    cy.get('.hipaa-event-details-basic-table').should('contain.text', firstName).and('contain.text', lastName);\n    cy.get('.hipaa-logs-modal').find('button.close').click();\n    //Step 11\n    cy.request({\n        method: 'POST', url: \"\".concat(configFile.url, \"/api/organizations/\").concat(orgId, \"/externalassignment/add\"), auth: {\n            bearer: token\n        }, headers: {\n            'Accept': 'application/json; charset=utf-8',\n            'Accept-Encoding': 'gzip, deflate, br',\n            'Content-Type': 'application/json; charset=utf-8'\n        }, body: {\n            accessionNumber: newAccessionNumber\n        }, timeout: configFile.longTimeout\n    }).then(function () {\n        worklist_common_1.Worklist.refreshWL();\n        element_handler_1.elementHandler.element('assignedName-cell').each(function (col) {\n            cy.wrap(col).should('have.attr', 'title').and('eq', \"null\");\n        });\n    });\n});",
              "err": {},
              "uuid": "90411654-1ca5-4c5c-a76b-2dfbb5b27b1f",
              "parentUUID": "e240f7d0-f528-44be-956c-d1c8a9cf9df3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Disable facility and cleanup",
              "fullTitle": "ECP-T3415-CHRS: Ingestion of HL7 Assignee information functionality for non existing user  Disable facility and cleanup",
              "timedOut": null,
              "duration": 7139,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_1.Common.login(customerName, userName, userpassword);\nmeteor_1.Meteor.changeFacilityStatus(facilityName, false);",
              "err": {},
              "uuid": "f83838fc-65f1-403b-84a7-0a3429f65e0c",
              "parentUUID": "e240f7d0-f528-44be-956c-d1c8a9cf9df3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "90411654-1ca5-4c5c-a76b-2dfbb5b27b1f",
            "f83838fc-65f1-403b-84a7-0a3429f65e0c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 181558,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "[name]",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "charts": true,
        "html": true,
        "json": true,
        "reportDir": "cypress/report/mochawesome",
        "overwrite": true,
        "reportFilename": "[name]",
        "reportTitle": "SI PACS Automation",
        "reportPageTitle": "SI PACS Automation",
        "autoOpen": false
      },
      "version": "6.2.0"
    }
  }
}