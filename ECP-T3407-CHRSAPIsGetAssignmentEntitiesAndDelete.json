{
  "stats": {
    "suites": 1,
    "tests": 2,
    "passes": 2,
    "pending": 0,
    "failures": 0,
    "start": "2024-12-15T03:42:12.898Z",
    "end": "2024-12-15T03:43:57.836Z",
    "duration": 104938,
    "testsRegistered": 2,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "20174408-b240-439a-8bb3-be4a7385c5e0",
      "title": "",
      "fullFile": "cypress/e2e/test-suites/ECP-T3407-CHRSAPIsGetAssignmentEntitiesAndDelete.spec.ts",
      "file": "cypress/test-suites/ECP-T3407-CHRSAPIsGetAssignmentEntitiesAndDelete.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f4a7cb01-2582-4e04-a949-488144c43cef",
          "title": "ECP-T3407-CHRS: APIs: Get Assignment entities and Delete",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "ECP-T3407",
              "fullTitle": "ECP-T3407-CHRS: APIs: Get Assignment entities and Delete ECP-T3407",
              "timedOut": null,
              "duration": 87358,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_1.Common.login(customerName, userName, userpassword);\ncommon_1.Common.switchToCustomer(customerName, configFile.timeout, true);\ncommon_1.Common.switchToFacility(facilityName);\nmeteor_1.Meteor.changeFeatures({\n    allowAPIs: true,\n    allowHl7: true,\n    allowWorklist: true,\n    allowHl7Assignment: true\n}, facilityName);\nvar mrn = crypto.randomUUID();\nvar accession = crypto.randomUUID();\ncommon_1.Common.createAPIToken(\"api_token_for_org_\".concat(facilityName)).then(function (res) {\n    token = res.token;\n    orgId = res.orgId;\n    common_1.Common.uploadProc({ name: 'Natasha Romanoff', token: token, mrn: mrn, accession: accession });\n}).then(function () {\n    common_1.Common.navigateTo('Worklist');\n    worklist_common_1.Worklist.selectView('All Unread');\n    cy.wait(1000);\n    cy.request({\n        method: 'POST', url: \"\".concat(configFile.url, \"/api/organizations/\").concat(orgId, \"/externalassignment/add\"), auth: {\n            bearer: token\n        }, headers: {\n            'Accept': 'application/json; charset=utf-8',\n            'Accept-Encoding': 'gzip, deflate, br',\n            'Content-Type': 'application/json; charset=utf-8'\n        }, body: {\n            accessionNumber: accession, firstName: 'Natasha', lastName: 'Romanoff', assigneeId: '123'\n        }\n    });\n    cy.request({\n        method: 'GET', url: \"\".concat(configFile.url, \"/api/assignments/externalusers/\").concat(orgId), auth: {\n            bearer: token\n        }, headers: {\n            'Accept': 'application/json; charset=utf-8',\n            'Accept-Encoding': 'gzip, deflate, br',\n            'Content-Type': 'application/json; charset=utf-8'\n        }\n    }).then(function (res) {\n        expect(res.body[0]).to.have.property('_id');\n        expect(res.body[0].lastName).eq('Romanoff');\n        expect(res.body[0].firstName).to.eq('Natasha');\n        expect(res.body[0].facilitiesIds[0]).to.eq(orgId);\n        cy.window().then(function (win) {\n            var t = \"meteor:\".concat(win.localStorage.getItem('Meteor.loginToken'));\n            cy.request({\n                method: 'DELETE', url: \"\".concat(configFile.url, \"/api/assignments/externalusers/\").concat(orgId, \"/\").concat(res.body[0]._id), auth: {\n                    bearer: t\n                }, headers: {\n                    'Accept': 'application/json; charset=utf-8',\n                    'Accept-Encoding': 'gzip, deflate, br',\n                    'Content-Type': 'application/json; charset=utf-8'\n                }\n            }).its('body').should('deep.equal', { response: 1 });\n            cy.request({\n                method: 'DELETE', url: \"\".concat(configFile.url, \"/api/assignments/externalusers/\").concat(orgId, \"/\").concat(res.body[0]._id), headers: {\n                    'Accept': 'application/json; charset=utf-8',\n                    'Accept-Encoding': 'gzip, deflate, br',\n                    'Content-Type': 'application/json; charset=utf-8'\n                }, failOnStatusCode: false\n            }).its('status').should('eq', 403);\n            cy.request({\n                method: 'DELETE', url: \"\".concat(configFile.url, \"/assignments/externalusers/\").concat(orgId, \"/\").concat(res.body[0]._id), headers: {\n                    'Accept': 'application/json; charset=utf-8',\n                    'Accept-Encoding': 'gzip, deflate, br',\n                    'Content-Type': 'application/json; charset=utf-8'\n                },\n                failOnStatusCode: false\n            }).its('status').should('eq', 405);\n            cy.request({\n                method: 'GET', url: \"\".concat(configFile.url, \"/api/assignments/externalusers/\").concat(orgId), auth: {\n                    bearer: 'blerg'\n                }, headers: {\n                    'Accept': 'application/json; charset=utf-8',\n                    'Accept-Encoding': 'gzip, deflate, br',\n                    'Content-Type': 'application/json; charset=utf-8'\n                },\n                failOnStatusCode: false\n            }).its('status').should('eq', 403);\n            cy.request({\n                method: 'GET', url: \"\".concat(configFile.url, \"/assignments/externalusers/\").concat(orgId), auth: {\n                    bearer: t\n                }, headers: {\n                    'Accept': 'application/json; charset=utf-8',\n                    'Accept-Encoding': 'gzip, deflate, br',\n                    'Content-Type': 'application/json; charset=utf-8'\n                },\n                failOnStatusCode: false\n            }).its('status').should('eq', 200);\n            cy.request({\n                method: 'POST', url: \"\".concat(configFile.url, \"/api/organizations/\").concat(orgId, \"/externalassignment/add\"), auth: {\n                    bearer: token\n                }, headers: {\n                    'Accept': 'application/json; charset=utf-8',\n                    'Accept-Encoding': 'gzip, deflate, br',\n                    'Content-Type': 'application/json; charset=utf-8'\n                }, body: {\n                    accessionNumber: '436436346', firstName: 'Natasha', lastName: 'Romanoff', assigneeId: '1233424'\n                }\n            }).its('status').should('eq', 200);\n            cy.request({\n                method: 'GET', url: \"\".concat(configFile.url, \"/api/assignments/pendings/\").concat(orgId), auth: {\n                    bearer: t\n                }, headers: {\n                    'Accept': 'application/json; charset=utf-8',\n                    'Accept-Encoding': 'gzip, deflate, br',\n                    'Content-Type': 'application/json; charset=utf-8'\n                }\n            }).then(function (res) {\n                expect(res.body[0]).to.have.property('_id');\n                expect(res.body[0].accessionNumber).to.eq('436436346');\n                expect(res.body[0].organizationId).to.eq(orgId);\n                expect(res.body[0].accessionNumberUpper).to.eq('436436346');\n                expect(res.body[0].assignType).to.eq('HL7');\n                expect(res.body[0]).to.have.property('createdAt');\n            });\n            cy.request({\n                method: 'GET', url: \"\".concat(configFile.url, \"/api/assignments/pendings/\").concat(orgId), auth: {\n                    bearer: token\n                }, headers: {\n                    'Accept': 'application/json; charset=utf-8',\n                    'Accept-Encoding': 'gzip, deflate, br',\n                    'Content-Type': 'application/json; charset=utf-8'\n                },\n                failOnStatusCode: false\n            }).its('status').should('eq', 500);\n            cy.request({\n                method: 'GET', url: \"\".concat(configFile.url, \"/assignments/pendings/\").concat(orgId), auth: {\n                    bearer: t\n                }, headers: {\n                    'Accept': 'application/json; charset=utf-8',\n                    'Accept-Encoding': 'gzip, deflate, br',\n                    'Content-Type': 'application/json; charset=utf-8'\n                },\n                failOnStatusCode: false\n            }).its('status').should('eq', 200);\n            cy.request({\n                method: 'GET', url: \"\".concat(configFile.url, \"/api/assignments/pendings/\").concat(orgId), auth: {\n                    bearer: t\n                }, headers: {\n                    'Accept': 'application/json; charset=utf-8',\n                    'Accept-Encoding': 'gzip, deflate, br',\n                    'Content-Type': 'application/json; charset=utf-8'\n                }\n            }).then(function (res) {\n                expect(res.body[0]).to.have.property('_id');\n                expect(res.body[0].accessionNumber).to.eq('436436346');\n                expect(res.body[0].organizationId).to.eq(orgId);\n                expect(res.body[0].accessionNumberUpper).to.eq('436436346');\n                expect(res.body[0].assignType).to.eq('HL7');\n                expect(res.body[0]).to.have.property('createdAt');\n                cy.request({\n                    method: 'DELETE', url: \"\".concat(configFile.url, \"/api/assignments/pendings/\").concat(orgId, \"/\").concat(res.body[0]._id), auth: {\n                        bearer: t\n                    }, headers: {\n                        'Accept': 'application/json; charset=utf-8',\n                        'Accept-Encoding': 'gzip, deflate, br',\n                        'Content-Type': 'application/json; charset=utf-8'\n                    }\n                }).its('status').should('eq', 200);\n                cy.request({\n                    method: 'DELETE', url: \"\".concat(configFile.url, \"/api/assignments/pendings/\").concat(orgId, \"/\").concat(res.body[0]._id), auth: {\n                        bearer: token\n                    }, headers: {\n                        'Accept': 'application/json; charset=utf-8',\n                        'Accept-Encoding': 'gzip, deflate, br',\n                        'Content-Type': 'application/json; charset=utf-8'\n                    },\n                    failOnStatusCode: false\n                }).its('status').should('eq', 500);\n                cy.request({\n                    method: 'DELETE', url: \"\".concat(configFile.url, \"/assignments/pendings/\").concat(orgId, \"/\").concat(res.body[0]._id), auth: {\n                        bearer: t\n                    }, headers: {\n                        'Accept': 'application/json; charset=utf-8',\n                        'Accept-Encoding': 'gzip, deflate, br',\n                        'Content-Type': 'application/json; charset=utf-8'\n                    },\n                    failOnStatusCode: false\n                }).its('status').should('eq', 405);\n            });\n            cy.request({\n                method: 'GET', url: \"\".concat(configFile.url, \"/api/assignments/pendings/\").concat(orgId), auth: {\n                    bearer: t\n                }, headers: {\n                    'Accept': 'application/json; charset=utf-8',\n                    'Accept-Encoding': 'gzip, deflate, br',\n                    'Content-Type': 'application/json; charset=utf-8'\n                }\n            }).then(function (res) {\n                expect(res.body).to.be.an('array').that.is.empty;\n            });\n            //clean up \n            cy.request({\n                method: 'GET', url: \"\".concat(configFile.url, \"/api/assignments/externalusers/\").concat(orgId), auth: {\n                    bearer: token\n                }, headers: {\n                    'Accept': 'application/json; charset=utf-8',\n                    'Accept-Encoding': 'gzip, deflate, br',\n                    'Content-Type': 'application/json; charset=utf-8'\n                }\n            }).then(function (res) {\n                cy.window().then(function (win) {\n                    var e_1, _a;\n                    var t = \"meteor:\".concat(win.localStorage.getItem('Meteor.loginToken'));\n                    try {\n                        //cleanup\n                        for (var _b = __values(res.body), _c = _b.next(); !_c.done; _c = _b.next()) {\n                            var assignment = _c.value;\n                            cy.request({\n                                method: 'DELETE', url: \"\".concat(configFile.url, \"/api/assignments/externalusers/\").concat(orgId, \"/\").concat(assignment._id), auth: {\n                                    bearer: t\n                                }, headers: {\n                                    'Accept': 'application/json; charset=utf-8',\n                                    'Accept-Encoding': 'gzip, deflate, br',\n                                    'Content-Type': 'application/json; charset=utf-8'\n                                }\n                            });\n                        }\n                    }\n                    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                    finally {\n                        try {\n                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                        }\n                        finally { if (e_1) throw e_1.error; }\n                    }\n                });\n            });\n        });\n    });\n});",
              "err": {},
              "uuid": "8f509d37-95d5-459c-a808-c07500925602",
              "parentUUID": "f4a7cb01-2582-4e04-a949-488144c43cef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Disable facility and cleanup",
              "fullTitle": "ECP-T3407-CHRS: APIs: Get Assignment entities and Delete Disable facility and cleanup",
              "timedOut": null,
              "duration": 8674,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_1.Common.login(customerName, userName, userpassword);\nmeteor_1.Meteor.changeFacilityStatus(facilityName, false);",
              "err": {},
              "uuid": "ea02e9f8-013c-4f80-a23e-d31dcee45375",
              "parentUUID": "f4a7cb01-2582-4e04-a949-488144c43cef",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8f509d37-95d5-459c-a808-c07500925602",
            "ea02e9f8-013c-4f80-a23e-d31dcee45375"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 96032,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "[name]",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "charts": true,
        "html": true,
        "json": true,
        "reportDir": "cypress/report/mochawesome",
        "overwrite": true,
        "reportFilename": "[name]",
        "reportTitle": "SI PACS Automation",
        "reportPageTitle": "SI PACS Automation",
        "autoOpen": false
      },
      "version": "6.2.0"
    }
  }
}