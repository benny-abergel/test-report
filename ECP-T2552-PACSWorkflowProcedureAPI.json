{
  "stats": {
    "suites": 1,
    "tests": 15,
    "passes": 15,
    "pending": 0,
    "failures": 0,
    "start": "2024-12-15T02:04:11.340Z",
    "end": "2024-12-15T02:07:13.887Z",
    "duration": 182547,
    "testsRegistered": 15,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "935bcf39-9cdf-4b83-894f-a1142ba0466d",
      "title": "",
      "fullFile": "cypress/e2e/test-suites/ECP-T2552-PACSWorkflowProcedureAPI.spec.ts",
      "file": "cypress/test-suites/ECP-T2552-PACSWorkflowProcedureAPI.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "63637870-42a1-4477-90bb-b12058e5a48d",
          "title": "ECP-T2552 - PACS Workflow - Procedure API",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Creating Procedure -1",
              "fullTitle": "ECP-T2552 - PACS Workflow - Procedure API Creating Procedure -1",
              "timedOut": null,
              "duration": 121910,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_1.Common.login(customerName, username, userpassword);\ncommon_1.Common.switchToCustomer(customerName, configFile.timeout, true);\ncommon_1.Common.switchToFacility(facilityName);\ncy.wait(configFile.smallTimeout);\n// Verify That All required features are enabled\ncommon_1.Common.createAPIToken(\"api_token_for_org_\".concat(facilityName)).then(function (res) {\n    token = res.token;\n    orgId = res.orgId;\n    console.log('token: ', token, ' , orgId: ', orgId);\n    header = {\n        Authorization: \"Bearer \".concat(token),\n        Accept: 'application/json; charset=utf-8',\n        'Content-Type': 'application/json; charset=utf-8'\n    };\n    cy.request({\n        url: ormurl,\n        method: 'POST',\n        body: ormbody(\"Acceptance^Set^^^\", \"1234\", \"19580308154637\", \"1434\", \"CAPC\", \"CTA CHEST\", \"Scheduled\", \"CT\", \"CHEST\"),\n        headers: header,\n    }).then(function (response) {\n        expect(response.status).to.equals(200);\n    });\n});",
              "err": {},
              "uuid": "0deec95b-2a76-4228-9beb-fba41ca342d9",
              "parentUUID": "63637870-42a1-4477-90bb-b12058e5a48d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Creating multiple records for performance testing",
              "fullTitle": "ECP-T2552 - PACS Workflow - Procedure API Creating multiple records for performance testing",
              "timedOut": null,
              "duration": 24680,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "for (var i = 1; i < 102; i++) {\n    cy.request({\n        url: ormurl,\n        method: 'POST',\n        body: ormbody(\"Romanoff^Natasha^^^\", \"2345687\", \"19580308154637\", \"\\\"\".concat(i, \"\\\"\"), \"CAPC\", \"CTA CHEST\", \"In Progress\", \"XT\", \"Lungs\"),\n        headers: header\n    }).then(function (response) {\n        expect(response.status).to.equals(200);\n    });\n}\ncy.request({\n    url: proceduresurl,\n    method: 'POST',\n    headers: header,\n    body: {\n        \"query\": {\n            \"patientInfo.lastNameUpper\": \"ROMANOFF\"\n        }\n    }\n}).then(function (response) {\n    expect(response.status).to.equals(200);\n    expect(response.body.data[0]._id);\n    expect(response.body.data[1]._id);\n    expect(response.body.data[2]._id);\n    expect(response.body.total).to.equal(100);\n    expect(response.body.pages).to.equal(1);\n});",
              "err": {},
              "uuid": "f4709887-b3f9-4669-9013-118111281f50",
              "parentUUID": "63637870-42a1-4477-90bb-b12058e5a48d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Creating Procedure -2",
              "fullTitle": "ECP-T2552 - PACS Workflow - Procedure API Creating Procedure -2",
              "timedOut": null,
              "duration": 719,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n    url: ormurl,\n    method: 'POST',\n    body: ormbody(\"Acceptance^Set^^^\", \"1234\", \"19580308154637\", \"8888\", \"CAPC\", \"CTA CHEST\", \"Scheduled\", \"CT\", \"CHEST\"),\n    headers: header,\n}).then(function (response) {\n    expect(response.status).to.equals(200);\n});",
              "err": {},
              "uuid": "549f0773-90db-463a-aec9-e85111f78f1e",
              "parentUUID": "63637870-42a1-4477-90bb-b12058e5a48d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Creating Procedure -3",
              "fullTitle": "ECP-T2552 - PACS Workflow - Procedure API Creating Procedure -3",
              "timedOut": null,
              "duration": 740,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n    url: ormurl,\n    method: 'POST',\n    body: ormbody(\"Acceptance^Set^^^\", \"1234\", \"19580308154637\", \"9999\", \"CAPC\", \"CTA CHEST\", \"Scheduled\", \"CT\", \"CHEST\"),\n    headers: header,\n}).then(function (response) {\n    expect(response.status).to.equals(200);\n});",
              "err": {},
              "uuid": "b5246066-c3c9-485f-bc7b-35adf28c4e79",
              "parentUUID": "63637870-42a1-4477-90bb-b12058e5a48d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Request body to query as per LastName",
              "fullTitle": "ECP-T2552 - PACS Workflow - Procedure API Request body to query as per LastName",
              "timedOut": null,
              "duration": 594,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n    url: proceduresurl,\n    method: 'POST',\n    headers: header,\n    body: {\n        \"query\": {\n            \"patientInfo.lastNameUpper\": \"ACCEPTANCE\"\n        },\n        \"fields\": [\n            \"bodyPart\",\n            \"patientId\",\n            \"modality\",\n            \"requestingPhysicianName\"\n        ]\n    }\n}).then(function (response) {\n    expect(response.status).to.equals(200);\n    expect(response.body.data[0]._id);\n    expect(response.body.data[0].patientId);\n    expect(response.body.data[0].modality).to.equal(\"CT\");\n    expect(response.body.data[0].bodyPart).to.equal(\"CHEST\");\n    expect(response.body.data[0].requestingPhysicianName).to.equal(\"Bruce^Banner^^^MD\");\n    expect(response.body.data[1]._id);\n    expect(response.body.data[1].patientId);\n    expect(response.body.data[1].modality).to.equal(\"CT\");\n    expect(response.body.data[1].bodyPart).to.equal(\"CHEST\");\n    expect(response.body.data[1].requestingPhysicianName).to.equal(\"Bruce^Banner^^^MD\");\n    expect(response.body.data[2]._id);\n    expect(response.body.data[2].patientId);\n    expect(response.body.data[2].modality).to.equal(\"CT\");\n    expect(response.body.data[2].bodyPart).to.equal(\"CHEST\");\n    expect(response.body.data[2].requestingPhysicianName).to.equal(\"Bruce^Banner^^^MD\");\n    expect(response.body.total).to.equal(3);\n    expect(response.body.pages).to.equal(1);\n});",
              "err": {},
              "uuid": "3075e4fd-34bc-4737-b3b2-c18516170fe4",
              "parentUUID": "63637870-42a1-4477-90bb-b12058e5a48d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Request body to query as per Performing Department",
              "fullTitle": "ECP-T2552 - PACS Workflow - Procedure API Request body to query as per Performing Department",
              "timedOut": null,
              "duration": 643,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n    url: proceduresurl,\n    method: 'POST',\n    headers: header,\n    body: {\n        \"query\": {\n            \"performingDepartment\": \"Romanoff^Natasha^^\"\n        },\n        \"fields\": [\n            \"bodyPart\",\n            \"patientId\",\n            \"modality\"\n        ]\n    }\n}).then(function (response) {\n    expect(response.status).to.equals(200);\n    expect(response.body.data[0]._id);\n    expect(response.body.data[0].patientId);\n    expect(response.body.data[0].modality).to.equal(\"CT\");\n    expect(response.body.data[0].bodyPart).to.equal(\"CHEST\");\n    expect(response.body.data[1]._id);\n    expect(response.body.data[1].patientId);\n    expect(response.body.data[1].bodyPart).to.equal(\"Lungs\");\n    expect(response.body.data[2]._id);\n    expect(response.body.data[2].patientId);\n    expect(response.body.data[2].bodyPart).to.equal(\"Lungs\");\n    expect(response.body.total).to.equal(100);\n    expect(response.body.pages).to.equal(1);\n});",
              "err": {},
              "uuid": "b66d7cc2-4139-45dc-b4c6-bcb18b8df0cd",
              "parentUUID": "63637870-42a1-4477-90bb-b12058e5a48d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Request body to query as per First Name",
              "fullTitle": "ECP-T2552 - PACS Workflow - Procedure API Request body to query as per First Name",
              "timedOut": null,
              "duration": 722,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n    url: proceduresurl,\n    method: 'POST',\n    headers: header,\n    body: {\n        \"query\": {\n            \"patientInfo.firstNameUpper\": \"SET\"\n        },\n        \"fields\": [\n            \"bodyPart\",\n            \"patientId\",\n            \"modality\",\n            \"requestingPhysicianName\"\n        ]\n    }\n}).then(function (response) {\n    expect(response.status).to.equals(200);\n    expect(response.body.data[0]._id);\n    expect(response.body.data[0].patientId);\n    expect(response.body.data[0].modality).to.equal(\"CT\");\n    expect(response.body.data[0].bodyPart).to.equal(\"CHEST\");\n    expect(response.body.data[0].requestingPhysicianName).to.equal(\"Bruce^Banner^^^MD\");\n    expect(response.body.data[1]._id);\n    expect(response.body.data[1].patientId);\n    expect(response.body.data[1].modality).to.equal(\"CT\");\n    expect(response.body.data[1].bodyPart).to.equal(\"CHEST\");\n    expect(response.body.data[1].requestingPhysicianName).to.equal(\"Bruce^Banner^^^MD\");\n    expect(response.body.data[2]._id);\n    expect(response.body.data[2].patientId);\n    expect(response.body.data[2].modality).to.equal(\"CT\");\n    expect(response.body.data[2].bodyPart).to.equal(\"CHEST\");\n    expect(response.body.data[2].requestingPhysicianName).to.equal(\"Bruce^Banner^^^MD\");\n    expect(response.body.total).to.equal(3);\n    expect(response.body.pages).to.equal(1);\n});",
              "err": {},
              "uuid": "13da3662-99cc-4f11-9ae4-51ebee385c85",
              "parentUUID": "63637870-42a1-4477-90bb-b12058e5a48d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Request body to query as per MRN",
              "fullTitle": "ECP-T2552 - PACS Workflow - Procedure API Request body to query as per MRN",
              "timedOut": null,
              "duration": 684,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n    url: proceduresurl,\n    method: 'POST',\n    headers: header,\n    body: {\n        \"query\": {\n            \"patientInfo.mrns.mrn\": \"1234\"\n        },\n        \"fields\": [\n            \"bodyPart\",\n            \"patientId\",\n            \"modality\",\n            \"requestingPhysicianName\"\n        ]\n    }\n}).then(function (response) {\n    expect(response.status).to.equals(200);\n    expect(response.body.data[0]._id);\n    expect(response.body.data[0].patientId);\n    expect(response.body.data[0].modality).to.equal(\"CT\");\n    expect(response.body.data[0].bodyPart).to.equal(\"CHEST\");\n    expect(response.body.data[0].requestingPhysicianName).to.equal(\"Bruce^Banner^^^MD\");\n    expect(response.body.data[1]._id);\n    expect(response.body.data[1].patientId);\n    expect(response.body.data[1].modality).to.equal(\"CT\");\n    expect(response.body.data[1].bodyPart).to.equal(\"CHEST\");\n    expect(response.body.data[1].requestingPhysicianName).to.equal(\"Bruce^Banner^^^MD\");\n    expect(response.body.data[2]._id);\n    expect(response.body.data[2].patientId);\n    expect(response.body.data[2].modality).to.equal(\"CT\");\n    expect(response.body.data[2].bodyPart).to.equal(\"CHEST\");\n    expect(response.body.data[2].requestingPhysicianName).to.equal(\"Bruce^Banner^^^MD\");\n    expect(response.body.total).to.equal(3);\n    expect(response.body.pages).to.equal(1);\n});",
              "err": {},
              "uuid": "d6541a91-5031-4d66-9e86-57c51791802a",
              "parentUUID": "63637870-42a1-4477-90bb-b12058e5a48d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Request body to query as per mrnUpperStripped",
              "fullTitle": "ECP-T2552 - PACS Workflow - Procedure API Request body to query as per mrnUpperStripped",
              "timedOut": null,
              "duration": 1137,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n    url: proceduresurl,\n    method: 'POST',\n    headers: header,\n    body: {\n        \"query\": {\n            \"patientInfo.mrns.mrnUpperStripped\": \"1234\"\n        },\n        \"fields\": [\n            \"bodyPart\",\n            \"patientId\",\n            \"modality\",\n            \"requestingPhysicianName\"\n        ]\n    }\n}).then(function (response) {\n    expect(response.status).to.equals(200);\n    expect(response.body.data[0]._id);\n    expect(response.body.data[0].patientId);\n    expect(response.body.data[0].modality).to.equal(\"CT\");\n    expect(response.body.data[0].bodyPart).to.equal(\"CHEST\");\n    expect(response.body.data[0].requestingPhysicianName).to.equal(\"Bruce^Banner^^^MD\");\n    expect(response.body.data[1]._id);\n    expect(response.body.data[1].patientId);\n    expect(response.body.data[1].modality).to.equal(\"CT\");\n    expect(response.body.data[1].bodyPart).to.equal(\"CHEST\");\n    expect(response.body.data[1].requestingPhysicianName).to.equal(\"Bruce^Banner^^^MD\");\n    expect(response.body.data[2]._id);\n    expect(response.body.data[2].patientId);\n    expect(response.body.data[2].modality).to.equal(\"CT\");\n    expect(response.body.data[2].bodyPart).to.equal(\"CHEST\");\n    expect(response.body.data[2].requestingPhysicianName).to.equal(\"Bruce^Banner^^^MD\");\n    expect(response.body.total).to.equal(3);\n    expect(response.body.pages).to.equal(1);\n});",
              "err": {},
              "uuid": "49594258-152a-4c55-b119-23ae587df080",
              "parentUUID": "63637870-42a1-4477-90bb-b12058e5a48d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Request body to query as per Accession Number",
              "fullTitle": "ECP-T2552 - PACS Workflow - Procedure API Request body to query as per Accession Number",
              "timedOut": null,
              "duration": 1067,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n    url: proceduresurl,\n    method: 'POST',\n    headers: header,\n    body: {\n        \"query\": {\n            \"accessionNumberUpperStripped\": \"8888\"\n        },\n        \"fields\": [\n            \"bodyPart\",\n            \"patientId\",\n            \"modality\",\n            \"requestingPhysicianName\"\n        ]\n    }\n}).then(function (response) {\n    expect(response.status).to.equals(200);\n    expect(response.body.data[0]._id);\n    expect(response.body.data[0].patientId);\n    expect(response.body.data[0].bodyPart).to.equal(\"CHEST\");\n    expect(response.body.data[0].modality).to.equal(\"CT\");\n    expect(response.body.data[0].requestingPhysicianName).to.equal(\"Bruce^Banner^^^MD\");\n    expect(response.body.total).to.equal(1);\n    expect(response.body.pages).to.equal(1);\n});",
              "err": {},
              "uuid": "0959f137-3520-495f-b4e6-573443362342",
              "parentUUID": "63637870-42a1-4477-90bb-b12058e5a48d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Request body to query as per Procedure Status",
              "fullTitle": "ECP-T2552 - PACS Workflow - Procedure API Request body to query as per Procedure Status",
              "timedOut": null,
              "duration": 839,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n    url: proceduresurl,\n    method: 'POST',\n    headers: header,\n    body: {\n        \"query\": {\n            \"procedureStatus\": \"Scheduled\"\n        },\n        \"fields\": [\n            \"bodyPart\",\n            \"patientId\",\n            \"modality\",\n            \"requestingPhysicianName\",\n            \"scheduledDateTime\"\n        ]\n    }\n}).then(function (response) {\n    expect(response.status).to.equals(200);\n    expect(response.body.data[0]._id);\n    expect(response.body.data[0].patientId);\n    expect(response.body.data[0].bodyPart).to.equal(\"CHEST\");\n    expect(response.body.data[0].modality).to.equal(\"CT\");\n    expect(response.body.data[0].requestingPhysicianName).to.equal(\"Bruce^Banner^^^MD\");\n    time = response.body.data[0].scheduledDateTime.$date;\n    expect(response.body.data[1]._id);\n    expect(response.body.data[1].patientId);\n    expect(response.body.data[1].bodyPart).to.equal(\"Lungs\");\n    expect(response.body.data[1].requestingPhysicianName).to.equal(\"Bruce^Banner^^^MD\");\n    expect(response.body.data[1].scheduledDateTime.$date);\n    expect(response.body.total).to.equal(100);\n    expect(response.body.pages).to.equal(1);\n});",
              "err": {},
              "uuid": "464fd326-f976-4f0a-a7a4-7805fd9e714a",
              "parentUUID": "63637870-42a1-4477-90bb-b12058e5a48d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Request body to query as per Modality",
              "fullTitle": "ECP-T2552 - PACS Workflow - Procedure API Request body to query as per Modality",
              "timedOut": null,
              "duration": 840,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n    url: proceduresurl,\n    method: 'POST',\n    headers: header,\n    body: {\n        \"query\": {\n            \"modality\": \"CT\"\n        },\n        \"fields\": [\n            \"bodyPart\",\n            \"patientId\",\n            \"modality\",\n            \"requestingPhysicianName\"\n        ]\n    }\n}).then(function (response) {\n    expect(response.status).to.equals(200);\n    expect(response.body.data[0]._id);\n    expect(response.body.data[0].patientId);\n    expect(response.body.data[0].bodyPart).to.equal(\"CHEST\");\n    expect(response.body.data[0].modality).to.equal(\"CT\");\n    expect(response.body.data[0].requestingPhysicianName).to.equal(\"Bruce^Banner^^^MD\");\n    expect(response.body.data[1]._id);\n    expect(response.body.data[1].patientId);\n    expect(response.body.data[1].bodyPart).to.equal(\"CHEST\");\n    expect(response.body.data[1].modality).to.equal(\"CT\");\n    expect(response.body.data[1].requestingPhysicianName).to.equal(\"Bruce^Banner^^^MD\");\n    expect(response.body.data[2]._id);\n    expect(response.body.data[2].patientId);\n    expect(response.body.data[2].bodyPart).to.equal(\"CHEST\");\n    expect(response.body.data[2].modality).to.equal(\"CT\");\n    expect(response.body.data[2].requestingPhysicianName).to.equal(\"Bruce^Banner^^^MD\");\n    expect(response.body.total).to.equal(3);\n    expect(response.body.pages).to.equal(1);\n});",
              "err": {},
              "uuid": "5832edf4-f944-41ad-8f0e-c66446a2079a",
              "parentUUID": "63637870-42a1-4477-90bb-b12058e5a48d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Request body to query to fetch only ids",
              "fullTitle": "ECP-T2552 - PACS Workflow - Procedure API Request body to query to fetch only ids",
              "timedOut": null,
              "duration": 801,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n    url: proceduresurl,\n    method: 'POST',\n    headers: header,\n    body: {\n        \"query\": {\n            \"patientInfo.lastNameUpper\": \"ACCEPTANCE\"\n        }\n    }\n}).then(function (response) {\n    expect(response.status).to.equals(200);\n    expect(response.body.data[0]._id);\n    expect(response.body.data[1]._id);\n    expect(response.body.data[2]._id);\n    expect(response.body.total).to.equal(3);\n    expect(response.body.pages).to.equal(1);\n});",
              "err": {},
              "uuid": "6683aa1d-138a-4dec-bb14-9dee05729e7c",
              "parentUUID": "63637870-42a1-4477-90bb-b12058e5a48d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Request body with multiple queries ",
              "fullTitle": "ECP-T2552 - PACS Workflow - Procedure API Request body with multiple queries ",
              "timedOut": null,
              "duration": 739,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n    url: proceduresurl,\n    method: 'POST',\n    headers: header,\n    body: {\n        \"query\": {\n            \"procedureStatus\": \"Scheduled\",\n            \"patientInfo.lastNameUpper\": \"ACCEPTANCE\"\n        },\n        \"fields\": [\n            \"bodyPart\",\n            \"patientInfo\",\n            \"patientSex\",\n            \"modality\",\n            \"requestingPhysicianName\"\n        ]\n    }\n}).then(function (response) {\n    expect(response.status).to.equals(200);\n    expect(response.body.data[0]._id);\n    expect(response.body.data[0].modality).to.equal(\"CT\");\n    expect(response.body.data[0].bodyPart).to.equal(\"CHEST\");\n    expect(response.body.data[0].requestingPhysicianName).to.equal(\"Bruce^Banner^^^MD\");\n    expect(response.body.data[0].patientInfo.name).to.equal(\"Acceptance^Set^^^\");\n    expect(response.body.data[0].patientInfo.lastNameUpper).to.equal(\"ACCEPTANCE\");\n    expect(response.body.data[0].patientInfo.firstNameUpper).to.equal(\"SET\");\n    expect(response.body.data[0].patientInfo.birthDate.$date).to.equal(-372932003000);\n    expect(response.body.data[0].patientInfo.mrns[0].mrn).to.equal(\"1234\");\n    expect(response.body.data[0].patientInfo.mrns[0].mrnUpperStripped).to.equal(\"1234\");\n    expect(response.body.data[0].patientInfo.mrns[0].organizationId).to.equal(orgId);\n    expect(response.body.data[0].patientInfo.mrns[0].dataSourceSystemId);\n    expect(response.status).to.equals(200);\n    expect(response.body.data[1]._id);\n    expect(response.body.data[1].modality).to.equal(\"CT\");\n    expect(response.body.data[1].bodyPart).to.equal(\"CHEST\");\n    expect(response.body.data[1].requestingPhysicianName).to.equal(\"Bruce^Banner^^^MD\");\n    expect(response.body.data[1].patientInfo.name).to.equal(\"Acceptance^Set^^^\");\n    expect(response.body.data[1].patientInfo.lastNameUpper).to.equal(\"ACCEPTANCE\");\n    expect(response.body.data[1].patientInfo.firstNameUpper).to.equal(\"SET\");\n    expect(response.body.data[1].patientInfo.birthDate.$date).to.equal(-372932003000);\n    expect(response.body.data[1].patientInfo.mrns[0].mrn).to.equal(\"1234\");\n    expect(response.body.data[1].patientInfo.mrns[0].mrnUpperStripped).to.equal(\"1234\");\n    expect(response.body.data[1].patientInfo.mrns[0].organizationId).to.equal(orgId);\n    expect(response.body.data[1].patientInfo.mrns[0].dataSourceSystemId);\n    expect(response.status).to.equals(200);\n    expect(response.body.data[2]._id);\n    expect(response.body.data[2].modality).to.equal(\"CT\");\n    expect(response.body.data[2].bodyPart).to.equal(\"CHEST\");\n    expect(response.body.data[2].requestingPhysicianName).to.equal(\"Bruce^Banner^^^MD\");\n    expect(response.body.data[2].patientInfo.name).to.equal(\"Acceptance^Set^^^\");\n    expect(response.body.data[2].patientInfo.lastNameUpper).to.equal(\"ACCEPTANCE\");\n    expect(response.body.data[2].patientInfo.firstNameUpper).to.equal(\"SET\");\n    expect(response.body.data[2].patientInfo.birthDate.$date).to.equal(-372932003000);\n    expect(response.body.data[2].patientInfo.mrns[0].mrn).to.equal(\"1234\");\n    expect(response.body.data[2].patientInfo.mrns[0].mrnUpperStripped).to.equal(\"1234\");\n    expect(response.body.data[2].patientInfo.mrns[0].organizationId).to.equal(orgId);\n    expect(response.body.data[2].patientInfo.mrns[0].dataSourceSystemId);\n    expect(response.body.total).to.equal(3);\n    expect(response.body.pages).to.equal(1);\n});",
              "err": {},
              "uuid": "243c0e34-2829-4436-a4f5-bb91c339b479",
              "parentUUID": "63637870-42a1-4477-90bb-b12058e5a48d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Disable facility and cleanup",
              "fullTitle": "ECP-T2552 - PACS Workflow - Procedure API Disable facility and cleanup",
              "timedOut": null,
              "duration": 7577,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_1.Common.login(customerName, username, userpassword);\nmeteor_1.Meteor.changeFacilityStatus(facilityName, false);",
              "err": {},
              "uuid": "34de374f-81c4-484c-9d61-40a1a12907ac",
              "parentUUID": "63637870-42a1-4477-90bb-b12058e5a48d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0deec95b-2a76-4228-9beb-fba41ca342d9",
            "f4709887-b3f9-4669-9013-118111281f50",
            "549f0773-90db-463a-aec9-e85111f78f1e",
            "b5246066-c3c9-485f-bc7b-35adf28c4e79",
            "3075e4fd-34bc-4737-b3b2-c18516170fe4",
            "b66d7cc2-4139-45dc-b4c6-bcb18b8df0cd",
            "13da3662-99cc-4f11-9ae4-51ebee385c85",
            "d6541a91-5031-4d66-9e86-57c51791802a",
            "49594258-152a-4c55-b119-23ae587df080",
            "0959f137-3520-495f-b4e6-573443362342",
            "464fd326-f976-4f0a-a7a4-7805fd9e714a",
            "5832edf4-f944-41ad-8f0e-c66446a2079a",
            "6683aa1d-138a-4dec-bb14-9dee05729e7c",
            "243c0e34-2829-4436-a4f5-bb91c339b479",
            "34de374f-81c4-484c-9d61-40a1a12907ac"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 163692,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "[name]",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "charts": true,
        "html": true,
        "json": true,
        "reportDir": "cypress/report/mochawesome",
        "overwrite": true,
        "reportFilename": "[name]",
        "reportTitle": "SI PACS Automation",
        "reportPageTitle": "SI PACS Automation",
        "autoOpen": false
      },
      "version": "6.2.0"
    }
  }
}