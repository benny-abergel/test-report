{
  "stats": {
    "suites": 1,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2024-12-15T03:19:41.820Z",
    "end": "2024-12-15T03:21:44.332Z",
    "duration": 122512,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "06ceb18d-31b2-4224-96d0-02ae358d23b2",
      "title": "",
      "fullFile": "cypress/e2e/test-suites/ECP-T2776-SessionAPI.spec.ts",
      "file": "cypress/test-suites/ECP-T2776-SessionAPI.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "dc1cd127-e319-4946-b993-5e392a313f72",
          "title": "ECP-T2776 - Session API ",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Generating Session ID",
              "fullTitle": "ECP-T2776 - Session API  Generating Session ID",
              "timedOut": null,
              "duration": 88780,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_1.Common.login(customerName, username, userpassword);\ncommon_1.Common.switchToCustomer(customerName, configFile.timeout, true);\ncommon_1.Common.switchToFacility(facilityName);\ncy.wait(configFile.smallTimeout);\n// Verify That All required features are enabled\n//Step 1\ncy.wait(configFile.smallTimeout);\ncommon_1.Common.createAPIToken(\"api_token_for_org_\".concat(facilityName)).then(function (res) {\n    token = res.token;\n    orgId = res.orgId;\n    console.log('token: ', token, ' , orgId: ', orgId);\n    //Step 2\n    var examUploadCmd_01 = \"node utils/p10UploadDriver.js -baseUri=\".concat(configFile.url, \" -apiToken=\").concat(token, \" -maxParallel=5 -data=\").concat(\"resources/a-01\", \" -keepAlive=1\");\n    cy.exec(examUploadCmd_01, { log: true, env: { NODE_TLS_REJECT_UNAUTHORIZED: configFile.NODE_TLS_REJECT_UNAUTHORIZED }, timeout: configFile.hugeTimeout })\n        .then(function (_a) {\n        var code = _a.code, stdout = _a.stdout, stderr = _a.stderr;\n        console.log(code, stdout, stderr);\n    });\n    cy.wait(configFile.smallTimeout);\n    common_1.Common.navigateTo('Sharing List');\n    cy.waitUntil(function () { return cy.get('[title=\"a-01\"]').should('be.visible'); }, { timeout: configFile.hugeTimeout });\n    cy.wait(configFile.smallTimeout);\n    sessionurl = \"\".concat(configFile.url, \"/sessions/organization/\").concat(orgId);\n    header = {\n        Authorization: \"Bearer \".concat(token),\n        'Accept': 'application/json; charset=utf-8',\n        'Content-Type': 'application/json; charset=utf-8'\n    };\n    return cy.request({\n        url: sessionurl,\n        method: 'POST',\n        headers: header,\n        body: { userId: userId, userName: userName\n        }\n    }).then(function (response) {\n        expect(response.status).to.equals(200);\n        sessionId = response.body.sessionId;\n        expect(response.body.validUntil);\n        expect(response.body.sessionLogout);\n        expect(response.body.sessionLogout.nucleusBaseUrl);\n        expect(response.body.sessionLogout.contentType).to.equal('application/json');\n        expect(response.body.sessionLogout.href).to.equal(\"sessions/\".concat(userId));\n    });\n});",
              "err": {},
              "uuid": "f801002b-23d1-4172-9c24-275b35db7df2",
              "parentUUID": "dc1cd127-e319-4946-b993-5e392a313f72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verifying list of the current available services",
              "fullTitle": "ECP-T2776 - Session API  Verifying list of the current available services",
              "timedOut": null,
              "duration": 738,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var serviceurl = \"\".concat(configFile.url, \"/sessions/organization/\").concat(orgId, \"/services\");\nreturn cy.request({\n    url: serviceurl,\n    method: 'GET',\n    headers: header\n}).then(function (response) {\n    expect(response.status).to.equals(200);\n    expect(response.body.services);\n    serviceid = response.body.services[0].serviceId;\n    expect(response.body.services[0].serviceId);\n    expect(response.body.services[0].serviceName);\n});",
              "err": {},
              "uuid": "f02f8f5d-d312-4293-9ae0-8f732c79e963",
              "parentUUID": "dc1cd127-e319-4946-b993-5e392a313f72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verifying a service login",
              "fullTitle": "ECP-T2776 - Session API  Verifying a service login",
              "timedOut": null,
              "duration": 933,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "serviceloginurl = \"\".concat(configFile.url, \"/sessions/\").concat(sessionId, \"/service/\").concat(serviceid, \"/login\");\nreturn cy.request({\n    url: serviceloginurl,\n    method: 'POST',\n    headers: header\n}).then(function (response) {\n    expect(response.status).to.equals(200);\n    loginid = response.body.loginId;\n    expect(response.body.serviceId).to.equal(serviceid);\n    expect(response.body.logout.nucleusBaseUrl);\n    expect(response.body.logout.contentType).to.equal('application/json');\n    expect(response.body.logout.href);\n    expect(response.body.validUntil);\n    expect(response.body.organizationId).to.equal(orgId);\n    expect(response.body.userId).to.equal(userId);\n    expect(response.body.userName).to.equal(userName);\n    expect(response.body.loginToken);\n    logintoken = response.body.loginToken;\n});",
              "err": {},
              "uuid": "d36c7470-6cf7-45d4-8540-361080df7d6c",
              "parentUUID": "dc1cd127-e319-4946-b993-5e392a313f72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verifying a list of the current sessions",
              "fullTitle": "ECP-T2776 - Session API  Verifying a list of the current sessions",
              "timedOut": null,
              "duration": 615,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var currentsessionurl = \"\".concat(configFile.url, \"/sessions\");\nreturn cy.request({\n    url: currentsessionurl,\n    method: 'GET',\n    headers: header\n}).then(function (response) {\n    expect(response.status).to.equals(200);\n    expect(response.body.organizations);\n    expect(response.body.organizations[0].organizationId).to.equal(orgId);\n    expect(response.body.organizations[0].sessions);\n    expect(response.body.organizations[0].sessions[0].sessionId).to.equal(sessionId);\n    expect(response.body.organizations[0].sessions[0].userId).to.equal(userId);\n    expect(response.body.organizations[0].sessions[0].userName).to.equal(userName);\n    expect(response.body.organizations[0].sessions[0].validUntil);\n    expect(response.body.organizations[0].sessions[0].logins[0].loginId);\n    expect(response.body.organizations[0].sessions[0].logins[0].serviceId).to.equal(serviceid);\n    expect(response.body.organizations[0].sessions[0].logins[0].logout.nucleusBaseUrl);\n    expect(response.body.organizations[0].sessions[0].logins[0].logout.contentType).to.equal('application/json');\n    expect(response.body.organizations[0].sessions[0].logins[0].logout.href);\n    expect(response.body.organizations[0].sessions[0].logins[0].validUntil);\n});",
              "err": {},
              "uuid": "e3cd42ba-b7e7-4205-8547-bb69e53a8ba5",
              "parentUUID": "dc1cd127-e319-4946-b993-5e392a313f72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "List of the current login",
              "fullTitle": "ECP-T2776 - Session API  List of the current login",
              "timedOut": null,
              "duration": 759,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var currentloginurl = \"\".concat(configFile.url, \"/sessions/\").concat(sessionId);\nreturn cy.request({\n    url: currentloginurl,\n    method: 'GET',\n    headers: header\n}).then(function (response) {\n    expect(response.status).to.equals(200);\n    expect(response.body.sessionId).to.equal(sessionId);\n    expect(response.body.userId).to.equal(userId);\n    expect(response.body.userName).to.equal(userName);\n    expect(response.body.validUntil);\n    expect(response.body.logins[0].loginId);\n    expect(response.body.logins[0].serviceId).to.equal(serviceid);\n    expect(response.body.logins[0].logout.nucleusBaseUrl);\n    expect(response.body.logins[0].logout.contentType).to.equal('application/json');\n    expect(response.body.logins[0].logout.href);\n    expect(response.body.logins[0].validUntil);\n    expect(response.body.organizationId).to.equal(orgId);\n});",
              "err": {},
              "uuid": "101fee8a-8900-473e-8f63-c14ca6681dfd",
              "parentUUID": "dc1cd127-e319-4946-b993-5e392a313f72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "List of the current sessions for an organization",
              "fullTitle": "ECP-T2776 - Session API  List of the current sessions for an organization",
              "timedOut": null,
              "duration": 738,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return cy.request({\n    url: sessionurl,\n    method: 'GET',\n    headers: header\n}).then(function (response) {\n    expect(response.status).to.equals(200);\n    expect(response.body.organizationId).to.equal(orgId);\n    expect(response.body.sessions[0].sessionId).to.equal(sessionId);\n    expect(response.body.sessions[0].userId).to.equal(userId);\n    expect(response.body.sessions[0].userName).to.equal(userName);\n    expect(response.body.sessions[0].validUntil);\n    expect(response.body.sessions[0].logins[0].loginId);\n    expect(response.body.sessions[0].logins[0].serviceId).to.equal(serviceid);\n    expect(response.body.sessions[0].logins[0].logout.nucleusBaseUrl);\n    expect(response.body.sessions[0].logins[0].logout.contentType);\n    expect(response.body.sessions[0].logins[0].logout.href);\n});",
              "err": {},
              "uuid": "5aa0d36b-d1c0-4f81-94ad-c0ded7ffb054",
              "parentUUID": "dc1cd127-e319-4946-b993-5e392a313f72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "List of the current service logins",
              "fullTitle": "ECP-T2776 - Session API  List of the current service logins",
              "timedOut": null,
              "duration": 763,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return cy.request({\n    url: serviceloginurl,\n    method: 'GET',\n    headers: header\n}).then(function (response) {\n    expect(response.status).to.equals(200);\n    expect(response.body.organizationId).to.equal(orgId);\n    expect(response.body.userId).to.equal(userId);\n    expect(response.body.userName).to.equal(userName);\n    expect(response.body.validUntil);\n    expect(response.body.logins[0].loginId);\n    expect(response.body.logins[0].serviceId).to.equal(serviceid);\n    expect(response.body.logins[0].logout.nucleusBaseUrl);\n    expect(response.body.logins[0].logout.contentType).to.equal('application/json');\n    expect(response.body.logins[0].validUntil);\n});",
              "err": {},
              "uuid": "9501c647-a12d-4246-ad52-44032c0b7c64",
              "parentUUID": "dc1cd127-e319-4946-b993-5e392a313f72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "study information API",
              "fullTitle": "ECP-T2776 - Session API  study information API",
              "timedOut": null,
              "duration": 850,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "studyinformationapiurl = \"\".concat(configFile.url, \"/study-information/organization/\").concat(orgId, \"/study/\").concat(studyuid);\nreturn cy.request({\n    url: studyinformationapiurl,\n    method: 'GET',\n    headers: header\n}).then(function (response) {\n    expect(response.status).to.equals(200);\n    expect(response.body.organizationId).to.equal(orgId);\n    expect(response.body.studyId);\n    expect(response.body.studyInstanceUid).to.equal(studyuid);\n    expect(response.body.lastUpdateTime);\n    expect(response.body.studyInfo.nucleusBaseUrl);\n    expect(response.body.studyInfo.info);\n    expect(response.body.studyInfo.info.contentType);\n    expect(response.body.studyInfo.info.href);\n    expect(response.body.studyInfo.durableMetadata);\n    expect(response.body.studyInfo.versionMetadata);\n    expect(response.body.studyInfo.modification);\n});",
              "err": {},
              "uuid": "89fc8c25-174d-461b-b957-e05a71729dff",
              "parentUUID": "dc1cd127-e319-4946-b993-5e392a313f72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify a service can be logged out",
              "fullTitle": "ECP-T2776 - Session API  Verify a service can be logged out",
              "timedOut": null,
              "duration": 720,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var logouturl = \"\".concat(configFile.url, \"/sessions/\").concat(sessionId, \"/service/\").concat(serviceid, \"/login/\").concat(loginid);\nreturn cy.request({\n    url: logouturl,\n    method: 'DELETE',\n    headers: header\n}).then(function (response) {\n    expect(response.status).to.equals(200);\n});",
              "err": {},
              "uuid": "1f90ab77-2e4c-4623-b8fa-96d178ca21aa",
              "parentUUID": "dc1cd127-e319-4946-b993-5e392a313f72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the service is logged out",
              "fullTitle": "ECP-T2776 - Session API  Verify the service is logged out",
              "timedOut": null,
              "duration": 703,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var header2 = {\n    Authorization: \"Bearer \".concat(logintoken),\n    'Accept': 'application/json; charset=utf-8',\n    'Content-Type': 'application/json; charset=utf-8'\n};\nreturn cy.request({\n    url: studyinformationapiurl,\n    method: 'GET',\n    headers: header2,\n    failOnStatusCode: false\n}).then(function (response) {\n    expect(response.status).to.equals(403);\n});",
              "err": {},
              "uuid": "6fa41038-897a-4941-9b31-b5f0f0199b36",
              "parentUUID": "dc1cd127-e319-4946-b993-5e392a313f72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify a session can be logged out.",
              "fullTitle": "ECP-T2776 - Session API  Verify a session can be logged out.",
              "timedOut": null,
              "duration": 906,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var sessionouturl = \"\".concat(configFile.url, \"/sessions/\").concat(sessionId);\nreturn cy.request({\n    url: sessionouturl,\n    method: 'DELETE',\n    headers: header\n}).then(function (response) {\n    expect(response.status).to.equals(200);\n});",
              "err": {},
              "uuid": "f9d63fe7-ac78-478b-8712-50d9c5bd949e",
              "parentUUID": "dc1cd127-e319-4946-b993-5e392a313f72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the recently deleted session is no longer logged in ",
              "fullTitle": "ECP-T2776 - Session API  Verify the recently deleted session is no longer logged in ",
              "timedOut": null,
              "duration": 731,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var emptyurl = \"\".concat(configFile.url, \"/sessions\");\nreturn cy.request({\n    url: emptyurl,\n    method: 'GET',\n    headers: header\n}).then(function (response) {\n    expect(response.status).to.equals(200);\n    expect(response.body.organizations);\n    expect(response.body.organizations[0].organizationId).to.equal(orgId);\n    expect(response.body.organizations[0].sessions).empty;\n});",
              "err": {},
              "uuid": "be29f27d-e8f0-4fed-ac64-e6c2ebbbefad",
              "parentUUID": "dc1cd127-e319-4946-b993-5e392a313f72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Disable facility and cleanup",
              "fullTitle": "ECP-T2776 - Session API  Disable facility and cleanup",
              "timedOut": null,
              "duration": 7396,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_1.Common.login(customerName, username, userpassword);\nmeteor_1.Meteor.changeFacilityStatus(facilityName, false);",
              "err": {},
              "uuid": "59e032a8-12ed-4651-b171-989e10750301",
              "parentUUID": "dc1cd127-e319-4946-b993-5e392a313f72",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f801002b-23d1-4172-9c24-275b35db7df2",
            "f02f8f5d-d312-4293-9ae0-8f732c79e963",
            "d36c7470-6cf7-45d4-8540-361080df7d6c",
            "e3cd42ba-b7e7-4205-8547-bb69e53a8ba5",
            "101fee8a-8900-473e-8f63-c14ca6681dfd",
            "5aa0d36b-d1c0-4f81-94ad-c0ded7ffb054",
            "9501c647-a12d-4246-ad52-44032c0b7c64",
            "89fc8c25-174d-461b-b957-e05a71729dff",
            "1f90ab77-2e4c-4623-b8fa-96d178ca21aa",
            "6fa41038-897a-4941-9b31-b5f0f0199b36",
            "f9d63fe7-ac78-478b-8712-50d9c5bd949e",
            "be29f27d-e8f0-4fed-ac64-e6c2ebbbefad",
            "59e032a8-12ed-4651-b171-989e10750301"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 104632,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "[name]",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "charts": true,
        "html": true,
        "json": true,
        "reportDir": "cypress/report/mochawesome",
        "overwrite": true,
        "reportFilename": "[name]",
        "reportTitle": "SI PACS Automation",
        "reportPageTitle": "SI PACS Automation",
        "autoOpen": false
      },
      "version": "6.2.0"
    }
  }
}